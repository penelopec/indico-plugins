# This file is part of the CERN Indico plugins.
# Copyright (C) 2014 - 2019 CERN
#
# The CERN Indico plugins are free software; you can redistribute
# them and/or modify them under the terms of the MIT License; see
# the LICENSE file for more details.

from __future__ import unicode_literals

import json
import re
import requests

from marshmallow import Schema, fields, post_load

from flask import redirect, request
from flask_pluginengine import current_plugin
from werkzeug.urls import url_encode

from indico.core.db import db
from indico.core.plugins import get_plugin_template_module
from indico_search import SearchEngine

class JSONSearchEngine(SearchEngine):
   
    @property
    def url(self):
        return current_plugin.settings.get('search_url')

    @property
    def results_per_page(self):
        return current_plugin.settings.get('results_per_page')

    @property
    def token(self):
        return current_plugin.settings.get('token')

    def process(self):
        query_out = self._query()
        content = self._parse_query_out(query_out)
        return content


    def _query(self):
        endpoint = self._get_query_url()
        headers = self._get_query_headers()
        params_d = self._get_query_params()
        query_out = self._perform_query(endpoint, headers, params_d)
        query_out = json.loads(query_out)
        return query_out


    def _get_query_url(self):
        endpoint = '/api/records/'  # FIXME, it has to be the same endpoint set by the livesync plugin
        url = '{0}{1}'.format(self.url, endpoint)
        print >> open('/tmp/log', 'a'), "indico_search_json/engine.py/JSONSearchEngine._get_query_url returning url %s" %url
        return url 

    def _get_query_headers(self):
        token = self.token
        headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            'Authorization': 'Bearer %s' %token
        }
        print >> open('/tmp/log', 'a'), "indico_search_json/engine.py/JSONSearchEngine._get_query_headers returning headers %s" %headers
        return headers


    def _get_query_params(self):
        qphrase = self._build_phrase_query()
        qdate = self._build_date_query()
        #query = 'q=' + qphrase + qdate 
        query = qphrase + qdate
        query = query.replace(' ', '+')
        qpage = self._get_page_size()
        query = query + '&page=%s&size=%s' %(qpage, self.results_per_page)
        query_d = {}
        query_d['q'] = query

        ### FIXME Is this the way ???? #######

        ###access_d = self._get_access()
        ###if access_d:
        ###    query_d['access'] = access_d

        if self.user:
            query_d['access'] = self.user.email

        ### FIXME Is this the way ???? #######

        print >> open('/tmp/log', 'a'), "indico_search_json/engine.py/JSONSearchEngine._get_query_params returning query_d %s" %query
        return query_d


    def _build_phrase_query(self):
        #phrase = self.values['phrase']
        phrase = self._get_arg_from_url('phrase')
        phrase = self._escape_symbols(phrase)
        #field = self.values['field']
        field = self._get_arg_from_url('field')
        phrase = ' OR '.join([x.strip() for x in phrase.split()])
        if field:
            qphrase = '%s:(%s)' %(field, phrase)
        else:
            # FIXME: is this correct?
            qphrase = '(%s)' %phrase
        return qphrase


    def _escape_symbols(self, phrase):
        list_symbols = {'+':'\+', 
                        '-':'\-', 
                        '=':'\=', 
                        '&&':'\&\&', 
                        '||':'\|\|', 
                        '>':'\>', 
                        '<':'\<', 
                        '!':'\!', 
                        '(':'\(', 
                        ')':'\)', 
                        '{':'\{', 
                        '}':'\}', 
                        '[':'\[', 
                        ']':'\]', 
                        '^':'\^', 
                        '"':'\\"', 
                        '~':'\~', 
                        '*':'\*', 
                        '?':'\?', 
                        ':':'\:', 
                        '/':'\/'}

        # first, escape the backslashes 
        phrase = phrase.replace('\\', '\\\\')
        # then, escape the rest of symbols
        for k,v in list_symbols.items():
            phrase = phrase.replace(k, v)
        return phrase



    def _build_date_query(self):
        start_date = self._get_arg_from_url('start_date')
        end_date = self._get_arg_from_url('end_date')
        if start_date:
            start_date = self._fix_date_format(start_date)
        if end_date:
            end_date = self._fix_date_format(end_date)

        if start_date and end_date:
            qdate = ' AND date:[%s TO %s]' %(start_date, end_date)
        if start_date and not end_date:
            qdate = ' AND date:[%s TO *]' %start_date
        if not start_date and end_date:
            qdate = ' AND date:[* TO %s]' %end_date
        if not start_date and not end_date:
            qdate = ''
        return qdate


    def _fix_date_format(self, date_str):
        dd, mm, yyyy = date_str.split('/')
        return "%s-%s-%s" %(yyyy,mm,dd)


    def _get_page_size(self):
        #return request.args.get('search-page', '1')
        return self._get_arg_from_url('page', '1')


    def _perform_query(self, url, headers_d, params_d):

        #   output of the query is like this
        #
        #     {
        #       "aggregations": {},
        #       "hits": {
        #         "hits": [
        #           {
        #             "created": "2018-03-19T08:16:53.218017+00:00",
        #             "id": 5,
        #             "links": {
        #               "self": "http://<host:port>/api/record/5"
        #             },
        #             "metadata": {
        #               "_access": {<access details>},
        #               "control_number": "5",
        #               "class": "B",
        #               "description": "This is an awesome description for our first uploaded document",
        #               "title": "Demo document"
        #             },
        #             "updated": "2018-03-19T08:16:53.218042+00:00"
        #           }
        #         ],
        #         "total": 2
        #       },
        #       "links": {
        #         "prev": "http://<host:port>/api/records/?page=1&size=1",
        #         "self": "http://<host:port>/api/records/?page=2&size=1"
        #       }
        #     }


        # mock !!!
        query_out = {
                      "aggregations": {},
                      "hits": {
                        "hits": [
                          {
                            "created": "2018-03-19T08:16:53.218017+00:00",
                            "id": 5,
                            "links": {
                              "self": "http://<host:port>/api/record/5"
                            },
                            "metadata": {
                              "_access": "{<access details>}",
                              "control_number": "5",
                              "class": "B",
                              "title": "this is title 1",
                              "url": "http://title.1.gov", 
                              "author": "Jose Caballero 1"
                            },
                            "updated": "2018-03-19T08:16:53.218042+00:00"
                          },
                          {
                            "created": "2018-03-19T08:16:53.218017+00:00",
                            "id": 5,
                            "links": {
                              "self": "http://<host:port>/api/record/5"
                            },
                            "metadata": {
                              "_access": "{<access details>}",
                              "control_number": "5",
                              "class": "B",
                              "title": "this is title 2",
                              "url": "http://title.2.gov", 
                              "author": "Jose Caballero 2"
                            },
                            "updated": "2018-03-19T08:16:53.218042+00:00"
                          },

                        ],
                        "total": 20
                      },
                      "links": {
                        "prev": "http://<host:port>/api/records/?page=1&size=1",
                        "self": "http://<host:port>/api/records/?page=2&size=1"
                      }
                    }

        #if response.ok:
        #    content = json.loads(response.content)
        #    return content
       
        query_out = json.dumps(query_out) 
        return query_out


    def _parse_query_out(self, query_out):   
        content = {}
        content["entries"] = []
        for result in query_out['hits']['hits']:
            content["entries"].append(result["metadata"])
        content["page"] = self._get_arg_from_url('page', '1')
        content["size"] = self.results_per_page
        content["total"] = query_out['hits']['total']

        content["request"] = request.args

        return content 

    def _get_arg_from_url(self, token, default=None):
        if not token.startswith('search-'):
            token = 'search-%s' %token
        value = request.args.get(token)
        if not value:
            value = default 
        return value


